#version 130

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in float visibility;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[4];
uniform vec3 skyColor;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	
	for(int i = 0; i < 4; i++){
	
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal,unitLightVector);
		totalDiffuse = totalDiffuse +  lightColor[i];
	}
	
	totalDiffuse = max(totalDiffuse, 0.15);
	
	vec4 textureColor = texture2D(textureSampler,pass_textureCoords);
	if(textureColor.a<0.5){
		discard;
	}
	
	out_color = vec4(totalDiffuse,1.0) * texture2D(textureSampler, pass_textureCoords);
	out_color = mix(vec4(skyColor,1.0),out_color,visibility);
}